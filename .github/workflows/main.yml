name: C++ with Static Libcurl (Multi-platform)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    # Use a matrix strategy to run jobs on different operating systems
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # Checks out your repository under $GITHUB_WORKSPACE

    # --- Windows Compilation Steps ---
    - name: Install MSYS2 and required libs (Windows)
      if: matrix.os == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        msystem: UCRT64 # Use the Universal C Runtime 64-bit environment
        update: true
        install: >-
          mingw-w64-ucrt-x86_64-toolchain
          mingw-w64-ucrt-x86_64-curl
          mingw-w64-ucrt-x86_64-openssl
          mingw-w64-ucrt-x86_64-zlib
          mingw-w64-ucrt-x86_64-libidn2
          mingw-w64-ucrt-x86_64-libssh2
          mingw-w64-ucrt-x86_64-libpsl
          mingw-w64-ucrt-x86_64-brotli
          mingw-w64-ucrt-x86_64-zstd
          mingw-w64-ucrt-x86_64-nghttp2
          mingw-w64-ucrt-x86_64-nghttp3
          mingw-w64-ucrt-x86_64-ngtcp2
          mingw-w64-ucrt-x86_64-libiconv
          mingw-w64-ucrt-x86_64-libunistring
          perl
        shell: bash {0} # Set the shell to msys2 bash for subsequent steps

    - name: Compile on Windows
      if: matrix.os == 'windows-latest'
      run: |
        # Set -e to exit immediately if a command exits with a non-zero status.
        # This will make sure pkg-config errors are caught.
        set -e

        # Ensure MSYS2's pkg-config is used and its environment is correct
        # The default install path for MSYS2 packages is /ucrt64/lib/pkgconfig
        export PKG_CONFIG_PATH="/ucrt64/lib/pkgconfig"
        # Explicitly use the MSYS2 bash shell for pkg-config to avoid conflicts with other Perl installations
        PKG_CONFIG_CMD="/ucrt64/bin/pkg-config"

        echo "Using pkg-config command: ${PKG_CONFIG_CMD}"
        ${PKG_CONFIG_CMD} --version # Verify pkg-config is found and runs

        # Get args required for compilation with pkg-config for both cflags (includes) and libs
        CURL_CFLAGS=$(${PKG_CONFIG_CMD} --define-prefix --static --cflags libcurl)
        CURL_LIBS=$(${PKG_CONFIG_CMD} --define-prefix --static --libs libcurl)
        echo "CURL_CFLAGS: $CURL_CFLAGS" # For debugging purposes
        echo "CURL_LIBS: $CURL_LIBS" # For debugging purposes

        # Compile main.cpp and util.c into tt.exe
        # Added CURL_CFLAGS to ensure include paths are found
        g++ main.cpp util.c -o tt.exe -static -DCURL_STATICLIB ${CURL_CFLAGS} ${CURL_LIBS} -std=c++17

        # Compile setup.cpp into tt-setup.exe
        g++ setup.cpp -o tt-setup.exe -static -std=c++17
      shell: bash {0} # Ensure we're in the MSYS2 bash shell for these commands

    # --- Linux and macOS Compilation Steps ---
    - name: Install build tools (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install -y build-essential make

    - name: Install build tools (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install gcc make

    - name: Download, configure, and build libcurl (Linux/macOS)
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
      run: |
        set -e # Exit immediately if any command fails

        CURL_VERSION="8.7.1" # Using a specific stable version for reproducibility
        CURL_TARBALL="curl-${CURL_VERSION}.tar.gz"
        CURL_DIR="curl-${CURL_VERSION}"
        INSTALL_DIR="${HOME}/curl" # User's specified installation directory

        mkdir -p "${INSTALL_DIR}" # Create the installation directory
        
        # Download libcurl source
        curl -LO "https://curl.se/download/${CURL_TARBALL}"
        tar -xzf "${CURL_TARBALL}" # Extract the source
        cd "${CURL_DIR}" # Navigate into the extracted source directory

        # Configure libcurl with simplified flags
        # Retained crucial static linking flags and explicit --without-ssl/--without-zlib
        ./configure \
          --prefix="${INSTALL_DIR}" \
          --disable-shared \
          --enable-static \
          --without-ssl \
          --without-zlib
        
        make # Compile libcurl
        make install # Install libcurl to the specified prefix
        
        echo "--- Contents of installed curl directory ---"
        ls -R "${INSTALL_DIR}" # List installed files for debugging
        echo "------------------------------------------"
      working-directory: ${{ github.workspace }} # Ensure we start in the repo root

    - name: Compile main.cpp and util.c (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        INSTALL_DIR="${HOME}/curl"
        g++ main.cpp util.c -o tt -L "${INSTALL_DIR}/lib" -I "${INSTALL_DIR}/include" -lcurl -DCURL_STATICLIB -static -static-libstdc++ -static-libgcc -std=c++17

    - name: Compile setup.cpp (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        g++ setup.cpp -o tt-setup -static -std=c++17 # Added -std=c++17 for consistency

    - name: Compile main.cpp and util.c (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Add Homebrew paths to ensure correct g++ and other tools are found
        # For Apple Silicon Macs (M1/M2/M3)
        export PATH="/opt/homebrew/bin:$PATH"
        # For Intel Macs
        export PATH="/usr/local/bin:$PATH"

        # Explicitly use g++-13 (or the latest GCC version installed by Homebrew)
        # This ensures we're using the GNU compiler, not Apple Clang, for consistent C++17 support.
        # If g++-13 isn't found, this will fall back to g++ which might still be clang.
        GXX_CMD="g++-13"
        if ! command -v "$GXX_CMD" &> /dev/null; then
            echo "Warning: g++-13 not found, falling back to default g++."
            GXX_CMD="g++"
        fi

        echo "Using g++ command: $GXX_CMD" # For debugging
        $GXX_CMD --version # Print g++ version for debugging

        INSTALL_DIR="${HOME}/curl"
        $GXX_CMD main.cpp util.c -o tt -L "${INSTALL_DIR}/lib" -I "${INSTALL_DIR}/include" -lcurl -DCURL_STATICLIB -std=c++17

    - name: Compile setup.cpp (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Explicitly use g++-13 (or the latest GCC version installed by Homebrew)
        GXX_CMD="g++-13"
        if ! command -v "$GXX_CMD" &> /dev/null; then
            echo "Warning: g++-13 not found, falling back to default g++."
            GXX_CMD="g++"
        fi
        
        # Added -std=c++17 to ensure modern C++ features are enabled for setup.cpp
        $GXX_CMD setup.cpp -o tt-setup -std=c++17

    # --- Run Compiled Applications (Optional) ---
    - name: Run compiled applications (optional)
      run: |
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          ./tt.exe
          # Removed ./tt-setup.exe as it expects user input
        else
          ./tt
          # Removed ./tt-setup as it expects user input
        fi

    - name: Verify compiled files (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        ls -l tt.exe
        ls -l tt-setup.exe
      shell: bash {0}

    - name: Verify compiled files (Linux/macOS)
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
      run: |
        ls -l tt
        ls -l tt-setup
