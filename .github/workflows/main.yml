name: C++ with Static Libcurl (Multi-platform)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    # Use a matrix strategy to run jobs on different operating systems
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # Checks out your repository under $GITHUB_WORKSPACE

    # --- Windows Compilation Steps ---
    - name: Install MSYS2 and required libs (Windows)
      if: matrix.os == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        msystem: UCRT64 # Use the Universal C Runtime 64-bit environment
        update: true
        install: >-
          mingw-w64-ucrt-x86_64-toolchain
          mingw-w64-ucrt-x86_64-curl
          mingw-w64-ucrt-x86_64-openssl
          mingw-w64-ucrt-x86_64-zlib
          mingw-w64-ucrt-x86_64-libidn2
          mingw-w64-ucrt-x86_64-libssh2
          mingw-w64-ucrt-x86_64-libpsl
          mingw-w64-ucrt-x86_64-brotli
          mingw-w64-ucrt-x86_64-zstd
          mingw-w64-ucrt-x86_64-nghttp2
          mingw-w64-ucrt-x86_64-nghttp3
          mingw-w64-ucrt-x86_64-ngtcp2
          mingw-w64-ucrt-x86_64-libiconv
          mingw-w64-ucrt-x86_64-libunistring
          perl
        shell: bash {0} # Set the shell to msys2 bash for subsequent steps

    - name: Compile on Windows
      if: matrix.os == 'windows-latest'
      run: |
        echo "Compiling on Windows without pkg-config reliance."
        
        # Explicitly define include and library paths for MSYS2 UCRT64 environment
        # These are standard locations where the 'install' step puts the libraries
        CURL_INCLUDE_PATH="-I/ucrt64/include"
        # Explicitly list all libraries curl might need when statically linked on Windows (MinGW-w64)
        CURL_LINK_LIBS="-lcurl -lssl -lcrypto -lz -lws2_32 -lwldap32 -lbcrypt -lcrypt32 -liphlpapi -lwinmm -lgo32 -lbrotlidec -lbrotlienc -lssh2 -lpsl -lunistring -lidn2 -liconv -lcomdlg32 -lgdi32 -lversion -lsetupapi -lshlwapi"

        echo "Using CURL_INCLUDE_PATH: ${CURL_INCLUDE_PATH}"
        echo "Using CURL_LINK_LIBS: ${CURL_LINK_LIBS}"

        echo "MINGW64: "
        ls /mingw64/lib
        echo "UCRT64: "
        ls /ucrt64/lib

        # Compile main.cpp and util.c into tt.exe
        g++ main.cpp util.c -o tt.exe -static -DCURL_STATICLIB -I /mingw64/include -L /mingw64/lib ${CURL_LINK_LIBS} -std=c++17

        # Compile setup.cpp into tt-setup.exe
        g++ setup.cpp -o tt-setup.exe -static -std=c++17
        
        # Compile test.cpp for Windows
        g++ test.cpp -o test.exe -std=c++17 -static
      shell: bash {0} # Ensure we're in the MSYS2 bash shell for these commands

    # --- Linux and macOS Compilation Steps ---
    - name: Install build tools (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install -y build-essential make libssl-dev zlib1g-dev # Install zlib1g-dev for zlib

    - name: Install build tools (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install gcc make openssl # Install openssl for TLS support

    - name: Download, configure, and build libcurl (Linux/macOS)
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
      run: |
        CURL_VERSION="8.7.1" # Using a specific stable version for reproducibility
        CURL_TARBALL="curl-${CURL_VERSION}.tar.gz"
        CURL_DIR="curl-${CURL_VERSION}"
        INSTALL_DIR="${HOME}/curl" # User's specified installation directory

        mkdir -p "${INSTALL_DIR}" # Create the installation directory
        
        # Download libcurl source
        curl -LO "https://curl.se/download/${CURL_TARBALL}"
        tar -xzf "${CURL_TARBALL}" # Extract the source
        cd "${CURL_DIR}" # Navigate into the extracted source directory

        # Set OpenSSL paths for configure on macOS
        if [ "${{ matrix.os }}" == "macos-latest" ]; then
          OPENSSL_PREFIX=$(brew --prefix openssl)
          export LDFLAGS="-L${OPENSSL_PREFIX}/lib"
          export CPPFLAGS="-I${OPENSSL_PREFIX}/include"
          echo "macOS OpenSSL LDFLAGS: ${LDFLAGS}"
          echo "macOS OpenSSL CPPFLAGS: ${CPPFLAGS}"
        fi

        # Configure libcurl: now enabling OpenSSL and explicitly disabling other features
        ./configure \
          --prefix="${INSTALL_DIR}" \
          --disable-shared \
          --enable-static \
          --with-openssl \
          --disable-ftp \
          --disable-file \
          --disable-ldap \
          --disable-ldaps \
          --disable-rtsp \
          --disable-dict \
          --disable-telnet \
          --disable-tftp \
          --disable-pop3 \
          --disable-imap \
          --disable-smtp \
          --disable-gopher \
          --disable-smb \
          --disable-unix-sockets \
          --disable-verbose \
          --disable-ntlm-wb \
          --disable-tls-srp \
          --disable-threaded-resolver \
          --disable-libcurl-option \
          --disable-alt-svc \
          --disable-doh \
          --disable-hsts \
          --disable-http-proxy \
          --disable-metalink \
          --disable-mqtt \
          --disable-proxy \
          --disable-rtmp \
          --disable-sspi \
          --disable-websockets \
          --disable-pthreads \
          --disable-manual \
          --disable-ipv6 \
          --without-brotli \
          --without-zstd \
          --without-nghttp2 \
          --without-libidn2 \
          --without-libpsl \
          --without-libssh2 \
          --without-gnutls \
          --without-librtmp \
          --without-mbedtls \
          --without-nss \
          --without-winldap \
          --without-wincrypt \
          --without-schannel \
          --without-ca-bundle \
          --without-ca-path \
          --disable-netrc
        
        make # Compile libcurl
        make install # Install libcurl to the specified prefix
        
        # Unset LDFLAGS and CPPFLAGS after configure/make install to avoid interference
        if [ "${{ matrix.os }}" == "macos-latest" ]; then
          unset LDFLAGS
          unset CPPFLAGS
        fi

        echo "--- Contents of installed curl directory ---"
        ls -R "${INSTALL_DIR}" # List installed files for debugging
        echo "------------------------------------------"
      working-directory: ${{ github.workspace }} # Ensure we start in the repo root

    - name: Compile main.cpp and util.c (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        INSTALL_DIR="${HOME}/curl"
        # Link against OpenSSL and Zlib for Linux
        g++ main.cpp util.c -o tt -L "${INSTALL_DIR}/lib" -I "${INSTALL_DIR}/include" -lcurl -DCURL_STATICLIB -static -static-libstdc++ -static-libgcc -std=c++17 -lz -lssl -lcrypto

    - name: Compile setup.cpp (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        g++ setup.cpp -o tt-setup -static -std=c++17 # Added -std=c++17 for consistency
        # Compile test.cpp for Linux
        g++ test.cpp -o test.out -static

    - name: Compile main.cpp and util.c (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Add Homebrew paths to ensure correct g++ and other tools are found
        export PATH="/opt/homebrew/bin:$PATH" # For Apple Silicon Macs (M1/M2/M3)
        export PATH="/usr/local/bin:$PATH" # For Intel Macs

        # Explicitly use g++-13 (or the latest GCC version installed by Homebrew)
        GXX_CMD="g++-13"
        if ! command -v "$GXX_CMD" &> /dev/null; then
            echo "Warning: g++-13 not found, falling back to default g++."
            GXX_CMD="g++"
        fi

        echo "Using g++ command: $GXX_CMD" # For debugging
        $GXX_CMD --version # Print g++ version for debugging

        INSTALL_DIR="${HOME}/curl"
        # Link against OpenSSL libraries and macOS frameworks
        $GXX_CMD main.cpp util.c -o tt \
          -L "${INSTALL_DIR}/lib" -I "${INSTALL_DIR}/include" \
          -lcurl -DCURL_STATICLIB -std=c++17 \
          -L"$(brew --prefix openssl)/lib" -lssl -lcrypto \
          -framework CoreFoundation -framework SystemConfiguration -lz

    - name: Compile setup.cpp (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Explicitly use g++-13 (or the latest GCC version installed by Homebrew)
        GXX_CMD="g++-13"
        if ! command -v "$GXX_CMD" &> /dev/null; then
            echo "Warning: g++-13 not found, falling back to default g++."
            GXX_CMD="g++"
        fi
        
        # Added -std=c++17 to ensure modern C++ features are enabled for setup.cpp
        $GXX_CMD setup.cpp -o tt-setup -std=c++17
        # Compile test.cpp for macOS
        $GXX_CMD test.cpp -o test.app -std=c++17

    # --- Remove Run Compiled Applications Step ---
    # Removed the step to run compiled executables as requested.

    - name: Verify compiled files (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        ls -l tt.exe
        ls -l tt-setup.exe
        ls -l test.exe
      shell: bash {0}

    - name: Verify compiled files (Linux/macOS)
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
      run: |
        ls -l tt
        ls -l tt-setup
        ls -l test.*
    
    - name: Upload Windows Artifacts
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: windows-executables
        path: |
          tt.exe
          tt-setup.exe
          test.exe

    - name: Upload Linux Artifacts
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: linux-executables
        path: |
          tt
          tt-setup
          test.out

    - name: Upload macOS Artifacts
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: macos-executables
        path: |
          tt
          tt-setup
          test.app
